<?php

/**
 * ProcessWire Google Maps Textformatter
 *
 * Looks for Google Maps URLs and automatically converts them to embedded
 * maps. Configurable options include embed type ("static" or "iframe"),
 * API key, responsive embedding and Google Maps for Business settings.
 *
 * @copyright Copyright (c) 2013-2014, Teppo Koivula
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */
class TextformatterGoogleMaps extends Textformatter implements ConfigurableModule {

    /**
     * Return module information
     *
     * @return array Module info
     */
    public static function getModuleInfo() {
        return array(
            'title' => __('Google Maps'), 
            'summary' => __('Enter a full Google Maps link by itself in any paragraph and this will automatically convert it to an embedded map. This formatter is intended to be run on trusted input. Recommended for use with TinyMCE textarea fields.'),
            'href' => 'http://modules.processwire.com/modules/textformatter-google-maps/',
            'author' => 'Teppo Koivula',
            'version' => 116,
        );
    }
    
    /**
     * Default configuration settings
     *
     */
    protected static $configDefaults = array(
        'width' => 425, 
        'height' => 350,
        'type' => 'iframe',
        'responsive' => true,
        'use_coordinates' => false,
        'static_maps_api_key' => null,
        'gmb_client_id' => null,
        'gmb_private_key' => null,
    ); 

    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();

    /**
     * Set our configuration defaults
     *
     */
    public function __construct() {
        foreach(self::$configDefaults as $key => $value) {
            $this->set($key, $value); 
        }
    }    

    /**
     * Make an iframe-based embed code responsive
     *
     * @param string $out HTML markup for image or iframe
     * @return string HTML markup altered to be responsive
     */
    protected function makeResponsive($out) {
        if ($this->type == "static") {
            $out = str_replace("<img ", "<img style='max-width:100%;height:auto' ", $out);
        } else {
            $out = str_replace("<iframe ", "<iframe style='position:absolute;top:0;left:0;width:100%;height:100%;' ", $out);
            $out = "<div class='TextFormatterGoogleMaps' style='position:relative;padding:30px 0 56.25% 0;height:0;overflow:hidden;'>$out</div>";
        }
        return $out;
    }

    /**
     * Text formatting function as used by the Textformatter interface
     *
     * Here we look for (potential) Google maps URLs on first pass using a fast
     * strpos() function. When found, we do our second pass with preg_match_all
     * and replace all Google maps URLs with proper embed codes.
     *
     * @param string &$str Field content
     */
    public function format(&$str) {

        // fast strpos check for Google Maps URLs
        if (strpos($str, '://maps.google.') === false && strpos($str, '://www.google.') === false) return;

        // comprehensive preg_match_all check + capture matches to $matches
        if (!preg_match_all('#<p>\s*https?://[a-z]+.google.[a-z\.]+/maps\??(?:(?:/place/(.*?)/@(-?[0-9]*\.[0-9]*,-?[0-9]*\.[0-9]*))?(.*?(?:(?:&amp;)?q=([^&<]+).*?)?)(?:(?:,([0-9])+z)?/data=.*?)?)</p>#si', $str, $matches)) return;

        // make sure that we've got proper dimensions for embedded maps
        if (!$this->width || $this->width < 1) $this->width = self::$configDefaults['width'];
        if (!$this->height || $this->height < 1) $this->height = self::$configDefaults['height'];

        // iterate over found matches
        foreach($matches[0] as $key => $value) { 

            // check if zoom value was included in map URL (first we'll check
            // whether this is "old" or "new" maps URL with $matches[4][$key])
            $z = $matches[4][$key] ? $matches[5][$key] : null;
            if (!$z) {
                if ($matches[3][$key] && strpos($matches[3][$key], "z=") !== false) {
                    if (preg_match('#(?:z=([0-9]+))#i', $matches[3][$key], $match)) {
                        $z = (int) $match[1];
                    }
                } else if (strpos($matches[0][$key], "z=") !== false) {
                    if (preg_match('#(?:z=([0-9]+))#i', $matches[0][$key], $match)) {
                        $z = (int) $match[1];
                    }
                }
            }

            // type is configured via module settings and can be "static" (for
            // static image embed method) or "iframe" (for iframe embed method)
            switch ($this->type) {
                case "static":
                    if ($matches[4][$key]) {
                        $q = urlencode($matches[4][$key]);
                    } else {
                        $q = $this->use_coordinates ? "loc:" . $matches[2][$key] : $matches[1][$key];
                    }
                    $src = "//maps.googleapis.com/maps/api/staticmap?sensor=false"
                         . "&amp;center=$q&amp;markers=$q&amp;size={$this->width}x{$this->height}";
                    if ($z) $src .= "&amp;zoom=$z";
                    // See https://developers.google.com/maps/documentation/staticmaps/#api_key
                    // for details about getting and using Static Maps API key
                    if ($this->static_maps_api_key) $src .= "&amp;api_key=" . urlencode($this->static_maps_api_key);
                    if ($this->gmb_client_id && $this->gmb_private_key) {
                        // See https://developers.google.com/maps/documentation/business/webservices
                        // for details about Google Maps for Business API
                        $src .= "&amp;client=" . urlencode($this->gmb_client_id);
                        $src .= "&amp;signature=" . $this->getSignature($src);
                    }
                    $out = "<img width='{$this->width}' height='{$this->height}' src='$src' alt='' />";
                    break;

                case "iframe":
                    $src = "//maps.google.com/maps?";
                    if ($matches[3][$key]) {
                        $src .= str_replace("'", "%27", $matches[3][$key]);
                    } else {
                        $src .= "q=" . ($this->use_coordinates ? "loc:" . $matches[2][$key] : $matches[1][$key]);
                    }
                    if ($z) $src .= "&amp;zoom=$z";
                    $src .= "&amp;output=embed";
                    $out = "<iframe frameborder='0' scrolling='no' marginheight='0' marginwidth='0'"
                         . " width='{$this->width}' height='{$this->height}' src='$src'></iframe>";
                    break;

                default:
                    throw new WireException(__("Missing or unrecognized embed type"));
            }

            // if responsive output is selected, alter output slightly
            if ($this->responsive) $out = $this->makeResponsive($out);

            // replace original link ($line) with new embed code ($out)
            $str = str_replace($value, $out, $str); 
        }
    }

    /**
     * Module configuration screen
     *
     * @param array $data
     * @return InputfieldWrapper
     */
    public static function getModuleConfigInputfields(array $data) {

        foreach(self::$configDefaults as $key => $value) {
            if(!isset($data[$key])) $data[$key] = $value;
        }

        $fields = new InputfieldWrapper();

        $field = wire('modules')->get('InputfieldSelect'); 
        $field->name = 'type';
        $field->value = $data['type']; 
        $field->required = true;
        $field->options = array(
            'iframe' => 'iframe',
            'static' => 'static'
        );
        $field->label = __('Map Type'); 
        $field->description = __("Embed type should be selected based on your use case. Please note that Google enforces usage limits on static maps, see [Static Maps API Developer Guide](https://developers.google.com/maps/documentation/staticmaps/#Limits) for details.");
        $fields->add($field);

        $field = wire('modules')->get('InputfieldCheckbox');
        $field->name = 'use_coordinates';
        $field->value = true;
        if ($data['use_coordinates']) $field->checked = true;
        $field->label = __("Use coordinates?");
        $field->description = __("When embedding maps, if coordinates are available use them instead of place name or address. This is always accurate, but location name will also be displayed as coordinates, which might be undesired.");
        $fields->add($field);

        $field = wire('modules')->get("InputfieldText");
        $field->name = 'static_maps_api_key';
        $field->value = $data['static_maps_api_key'];
        $field->label = __("Static Maps API key");
        $field->description = __("API key for Static Maps, see [Static Maps API Developer Guide](https://developers.google.com/maps/documentation/staticmaps/#api_key) for details. This isn't strictly necessary, but makes it possible to track usage and buy more quota.");
        $fields->add($field);

        $field = wire('modules')->get('InputfieldCheckbox'); 
        $field->name = 'responsive';
        $field->value = true;
        if ($data['responsive']) $field->checked = true;
        $field->label = __('Use Responsive Embed Method?'); 
        $field->description = __('When checked, maps will be embedded in a manner that allows them to be presented in a width-flexible format.'); 
        $fields->add($field); 

        $fieldset = wire('modules')->get('InputfieldFieldset');
        $fieldset->label = __("Default dimensions");
        $fieldset->description = __("Default dimensions for embedded maps. If responsive embed method is checked, these are used as max dimensions by static maps and ignored by iframe maps.");
        $fieldset->notes = __("Since dimensions are required especially for static maps to work at all, dimension settings should be filled in and both of them must be larger than zero. If left blank, module defaults will be used instead.");

        $field = wire('modules')->get('InputfieldInteger'); 
        $field->name = 'width';
        $field->value = ($data['width'] && $data['width'] > 0) ? $data['width'] : self::$configDefaults['width'];
        $field->label = __('Width');
        $field->columnWidth = 50;
        $fieldset->add($field); 

        $field = wire('modules')->get('InputfieldInteger'); 
        $field->name = 'height';
        $field->value = ($data['height'] && $data['height'] > 0) ? $data['height'] : self::$configDefaults['height'];
        $field->label = __('Height');
        $field->columnWidth = 50;
        $fieldset->add($field); 

        $fields->add($fieldset);

        $fieldset = wire('modules')->get('InputfieldFieldset');
        $fieldset->label = __("Maps for Business");
        if (!isset($data['client']) && !isset($data['signature'])) $fieldset->collapsed = Inputfield::collapsedYes;
        $fieldset->description = __("Google Maps for Business client ID and private key. Only applies to 'static' embed method. See [Maps API for Business documentation](https://developers.google.com/maps/documentation/business/webservices#business_specific_parameters) for details.");

        $field = wire('modules')->get('InputfieldText'); 
        $field->name = 'gmb_client_id';
        $field->value = $data['gmb_client_id'];
        $field->label = __('Client ID');
        $field->notes = __("Include the 'gme-' prefix in your client ID");
        $fieldset->add($field);

        $field = wire('modules')->get('InputfieldText'); 
        $field->name = 'gmb_private_key';
        $field->value = $data['gmb_private_key'];
        $field->label = __('Private key');
        $field->notes = __("Please note that your private key, if added here, will be saved as plain text in your database. Google's documentation explicitly states that the private key should not be \"stored on any websites\". Use this feature at your own risk and only if you're fully aware of the risks involved!");
        $fieldset->add($field);

        $fields->add($fieldset);

        return $fields;
    }

    /**
     * The following functions are to support the ConfigurableModule interface
     * since Textformatter does not originate from WireData
     *
     */

    public function set($key, $value) {
        $this->data[$key] = $value; 
        return $this;
    }

    public function get($key) {
        $value = Wire::getFuel($key); 
        if($value) return $value; 
        return isset($this->data[$key]) ? $this->data[$key] : null;
    }

    public function __set($key, $value) {
        $this->set($key, $value); 
    }

    public function __get($key) {
        return $this->get($key);
    }
    
    /**
     * Get Google Maps for Business signature
     *
     * Signature is based on specific URL and private cryptographic key. Code used
     * here was adapted from Google's Extended URL signing gallery sample for PHP:
     * http://gmaps-samples.googlecode.com/svn/trunk/urlsigning/UrlSigner.php-source
     *
     * @param string $url URL to sign
     * @return string Encoded binary signature
     */
    protected function getSignature($url) {

        // parse the URL
        $url = parse_url($url);
        $url_to_sign = $url['path'] . "?" . $url['query'];
        
        // Decode the private key into its binary format
        $decoded_key = base64_decode(str_replace(array('-', '_'), array('+', '/'), $this->gmb_private_key));
        
        // Create a signature using the private key and the URL
        // string using HMAC SHA1. This signature will be binary.
        $signature = hash_hmac("sha1", $url_to_sign, $decoded_key, true);
        $encoded_signature = str_replace(array('+', '/'), array('-', '_'), base64_encode($signature));
        
        return $encoded_signature;
    }

}